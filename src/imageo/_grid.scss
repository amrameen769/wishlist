@use "sass:math";

$grid-columns: 12;
$grid-gaps: (
 0: 0,
 1: 0.25rem,
 2: 0.5rem,
 3: 1rem,
 4: 1.25rem,
);

$justify-layout-values: flex-start, flex-end, center, space-between,
 space-around;
$align-layout-values: stretch, center, flex-start, flex-end, start, end;

.container {
 width: 100%;
 max-width: 1200px;
 margin: 0 auto;
 padding: 0 $base-padding * 2;
 box-sizing: border-box;
}

.d-flex {
 display: flex;
}

@each $key, $val in $directions {
 .d-flex-#{$key} {
  flex-direction: $val;
 }
}

.flex-grow {
 flex-grow: 1;
}

.row {
 display: flex;
 flex-flow: row wrap;
}

@each $key, $val in $grid-gaps {
 .gap-#{$key} > * {
  padding: $val;
 }
 .gap-#{$key} {
  margin-left: -$val;
  margin-right: -$val;
 }
}

@each $val in $justify-layout-values {
 .justify-#{$val} {
  justify-content: $val;
 }
}

@each $val in $align-layout-values {
 .align-#{$val} {
  align-items: $val;
 }
}

@include xs {
 @for $i from 1 through $grid-columns {
  .col-xs-#{$i} {
   box-sizing: border-box;
   flex-grow: 0;
   width: math.div($i * 100%, $grid-columns);
  }
 }
}

@include sm {
 @for $i from 1 through $grid-columns {
  .col-sm-#{$i} {
   box-sizing: border-box;
   flex-grow: 0;
   width: math.div($i * 100%, $grid-columns);
  }
 }
}

@include md {
 @for $i from 1 through $grid-columns {
  .col-md-#{$i} {
   box-sizing: border-box;
   flex-grow: 0;
   width: math.div($i * 100%, $grid-columns);
  }
 }
}

@include lg {
 @for $i from 1 through $grid-columns {
  .col-lg-#{$i} {
   box-sizing: border-box;
   flex-grow: 0;
   width: math.div($i * 100%, $grid-columns);
  }
 }
}

@include xl {
 @for $i from 1 through $grid-columns {
  .col-xl-#{$i} {
   box-sizing: border-box;
   flex-grow: 0;
   width: math.div($i * 100%, $grid-columns);
  }
 }
}
